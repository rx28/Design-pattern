Composite is a structural design pattern that lets you compose
objects into tree structures and then work with these
structures as if they were individual objects.

----------------------------------------------------------------------
Example:

The Composite design pattern facilitates the construction of tree-like structures where
individual objects and compositions of objects are treated uniformly. In the provided
example, the `Graphics` interface defines common operations `move()` and `draw()` that
both leaf and composite components implement. Leaf components, such as the `Dot` and
`Circle` classes, represent basic graphical elements with specific attributes like
coordinates and radius. On the other hand, the `CompoundGraphic` class acts as a
composite component, capable of containing other graphical elements. It manages a
list of child graphics and recursively delegates operations like `move()` and `draw()`
to its children. This hierarchical structure allows for the creation of complex graphical
scenes composed of simple elements. The `Runner` class demonstrates the pattern's usage by
creating a `CompoundGraphic`, adding both a `Dot` and a `Circle` to it, and then invoking the
`draw()` method, which seamlessly combines the drawing process of all contained elements.
 Overall, the Composite pattern promotes code reusability, flexibility, and the ability to
  work with complex structures in a unified manner.