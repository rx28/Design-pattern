Decorator is a structural design pattern that lets you attach
new behaviors to objects by placing these objects inside
special wrapper objects that contain the behaviors.

-----------------------------------------------------------------------------------
Example:
The code exemplifies the Decorator design pattern, a structural pattern that facilitates
the dynamic addition of responsibilities to objects. At its core are the `DataSource`
interface and the `FileDataSource` class, representing basic data sources and defining
fundamental data operations. The `DataSourceDecorator` class serves as the base
decorator, implementing the `DataSource` interface and maintaining a reference to a
wrapped component, allowing for the seamless stacking of decorators. Concrete decorators
such as `CompressionDecorator` and `EncryptionDecorator` extend `DataSourceDecorator`, introducing additional
functionality like compression and encryption to data sources. In the `Application` class, these decorators
are applied to a `FileDataSource`, showcasing how multiple decorators can be chained to modify behavior while
keeping the underlying object structure intact. Overall, the Decorator pattern promotes flexibility and extensibility
by enabling the dynamic composition of objects with varying functionalities at runtime, without the need for subclassing.